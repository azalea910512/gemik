
MyScriptName='MacQuanInc-VPN'

# OpenSSH Ports
SSH_Port1='22'
SSH_Port2='225'

# Your SSH Banner
SSH_Banner='https://raw.githubusercontent.com/quanmchb2003/AutoscriptDB/main/banner'

# Dropbear Ports
Dropbear_Port1='80'
Dropbear_Port2='442'

# Stunnel Ports
Stunnel_Port1='443' # through Dropbear
Stunnel_Port2='444' # through OpenSSH

# OpenVPN Ports
OpenVPN_TCP_Port='1103'
OpenVPN_UDP_Port='53'

# Privoxy Ports
Privoxy_Port1='8080'
Privoxy_Port2='8086'

# Squid Ports
Squid_Port1='8484'
Squid_Port2='3356'
Squid_Port3='60000'

# OpenVPN Config Download Port
OvpnDownload_Port='85' # Before changing this value, please read this document. It contains all unsafe ports for Google Chrome Browser, please read from line #23 to line #89: https://chromium.googlesource.com/chromium/src.git/+/refs/heads/master/net/base/port_util.cc

# Server local time
MyVPS_Time='Asia/Kuala_Lumpur'
#############################


#############################
#############################
## All function used for this script
#############################
## WARNING: Do not modify or edit anything
## if you did'nt know what to do.
## This part is too sensitive.
#############################
#############################

function InstUpdates(){
 export DEBIAN_FRONTEND=noninteractive
 apt-get update
 apt-get upgrade -y
 
 # Removing some firewall tools that may affect other services
 apt-get remove --purge ufw firewalld -y

 
 # Installing some important machine essentials
 apt-get install nano wget curl zip unzip tar gzip p7zip-full bc rc openssl cron net-tools dnsutils dos2unix screen bzip2 ccrypt -y
 
 # Now installing all our wanted services
 apt-get install dropbear stunnel4 privoxy ca-certificates nginx ruby apt-transport-https lsb-release squid -y

 # Installing all required packages to install Webmin
 apt-get install perl libnet-ssleay-perl openssl libauthen-pam-perl libpam-runtime libio-pty-perl apt-show-versions python dbus libxml-parser-perl -y
 apt-get install shared-mime-info jq fail2ban -y

 
 # Installing a text colorizer
 gem install lolcat

 # Trying to remove obsolette packages after installation
 apt-get autoremove -y
 
 # Installing OpenVPN by pulling its repository inside sources.list file 
 rm -rf /etc/apt/sources.list.d/openvpn*
 echo "deb http://build.openvpn.net/debian/openvpn/stable $(lsb_release -sc) main" > /etc/apt/sources.list.d/openvpn.list
 wget -qO - http://build.openvpn.net/debian/openvpn/stable/pubkey.gpg|apt-key add -
 apt-get update
 apt-get install openvpn -y
}

function InstWebmin(){
 # Download the webmin .deb package
 # You may change its webmin version depends on the link you've loaded in this variable(.deb file only, do not load .zip or .tar.gz file):
 WebminFile='https://github.com/johndesu090/AutoScriptDB/raw/master/Files/Plugins/webmin_1.920_all.deb'
 wget -qO webmin.deb "$WebminFile"
 
 # Installing .deb package for webmin
 dpkg --install webmin.deb
 
 rm -rf webmin.deb
 
 # Configuring webmin server config to use only http instead of https
 sed -i 's|ssl=1|ssl=0|g' /etc/webmin/miniserv.conf
 
 # Then restart to take effect
 systemctl restart webmin
}

function InstSSH(){
 # Removing some duplicated sshd server configs
 rm -f /etc/ssh/sshd_config*
 
 # Creating a SSH server config using cat eof tricks
 cat <<'MySSHConfig' > /etc/ssh/sshd_config
# My OpenSSH Server config
Port myPORT1
Port myPORT2
AddressFamily inet
ListenAddress 0.0.0.0
HostKey /etc/ssh/ssh_host_rsa_key
HostKey /etc/ssh/ssh_host_ecdsa_key
HostKey /etc/ssh/ssh_host_ed25519_key
PermitRootLogin yes
MaxSessions 1024
PubkeyAuthentication yes
PasswordAuthentication yes
PermitEmptyPasswords no
ChallengeResponseAuthentication no
UsePAM yes
X11Forwarding yes
PrintMotd no
ClientAliveInterval 240
ClientAliveCountMax 2
UseDNS no
Banner /etc/banner
AcceptEnv LANG LC_*
Subsystem   sftp  /usr/lib/openssh/sftp-server
MySSHConfig

 # Now we'll put our ssh ports inside of sshd_config
 sed -i "s|myPORT1|$SSH_Port1|g" /etc/ssh/sshd_config
 sed -i "s|myPORT2|$SSH_Port2|g" /etc/ssh/sshd_config

 # Download our SSH Banner
 rm -f /etc/banner
 wget -qO /etc/banner "$SSH_Banner"
 dos2unix -q /etc/banner

 # My workaround code to remove `BAD Password error` from passwd command, it will fix password-related error on their ssh accounts.
 sed -i '/password\s*requisite\s*pam_cracklib.s.*/d' /etc/pam.d/common-password
 sed -i 's/use_authtok //g' /etc/pam.d/common-password

 # Some command to identify null shells when you tunnel through SSH or using Stunnel, it will fix user/pass authentication error on HTTP Injector, KPN Tunnel, eProxy, SVI, HTTP Proxy Injector etc ssh/ssl tunneling apps.
 sed -i '/\/        bin\/false/d' /etc/shells
 sed -i '/\/usr\/sbin\/nologin/d' /etc/shells
 echo '/bin/false' >> /etc/shells
 echo '/usr/sbin/nologin' >> /etc/shells
 
 # Restarting openssh service
 systemctl restart ssh
 
 # Removing some duplicate config file
 rm -rf /etc/default/dropbear*
 
 # creating dropbear config using cat eof tricks
 cat <<'MyDropbear' > /etc/default/dropbear
# My Dropbear Config
NO_START=0
DROPBEAR_PORT=PORT01
DROPBEAR_EXTRA_ARGS="-p PORT02 -p PORT01"
DROPBEAR_BANNER="/etc/banner"
DROPBEAR_RSAKEY="/etc/dropbear/dropbear_rsa_host_key"
DROPBEAR_DSSKEY="/etc/dropbear/dropbear_dss_host_key"
DROPBEAR_ECDSAKEY="/etc/dropbear/dropbear_ecdsa_host_key"
DROPBEAR_RECEIVE_WINDOW=65536
MyDropbear

 # Now changing our desired dropbear ports
 sed -i "s|PORT01|$Dropbear_Port1|g" /etc/default/dropbear
 sed -i "s|PORT02|$Dropbear_Port2|g" /etc/default/dropbear
 
 # Restarting dropbear service
 systemctl restart dropbear
}

function InsStunnel(){
 StunnelDir=$(ls /etc/default | grep stunnel | head -n1)

 # Creating stunnel startup config using cat eof tricks
cat <<'MyStunnelD' > /etc/default/$StunnelDir
# My Stunnel Config
ENABLED=1
FILES="/etc/stunnel/*.conf"
OPTIONS=""
BANNER="/etc/banner"
PPP_RESTART=0
# RLIMITS="-n 4096 -d unlimited"
RLIMITS=""
MyStunnelD

 # Removing all stunnel folder contents
 rm -rf /etc/stunnel/*
 
 # Creating stunnel certifcate using openssl
 openssl req -new -x509 -days 9999 -nodes -subj "/C=PH/ST=NCR/L=Manila/O=$MyScriptName/OU=$MyScriptName/CN=$MyScriptName" -out /etc/stunnel/stunnel.pem -keyout /etc/stunnel/stunnel.pem &> /dev/null
##  > /dev/null 2>&1

 # Creating stunnel server config
 cat <<'MyStunnelC' > /etc/stunnel/stunnel.conf
# My Stunnel Config
pid = /var/run/stunnel.pid
cert = /etc/stunnel/stunnel.pem
client = no
socket = l:TCP_NODELAY=1
socket = r:TCP_NODELAY=1
TIMEOUTclose = 0

[dropbear]
accept = Stunnel_Port1
connect = 127.0.0.1:dropbear_port_c

[openssh]
accept = Stunnel_Port2
connect = 127.0.0.1:openssh_port_c

[openvpn]
accept = 990
connect = 127.0.0.1:1103
MyStunnelC

 # setting stunnel ports
 sed -i "s|Stunnel_Port1|$Stunnel_Port1|g" /etc/stunnel/stunnel.conf
 sed -i "s|dropbear_port_c|$(netstat -tlnp | grep -i dropbear | awk '{print $4}' | cut -d: -f2 | xargs | awk '{print $2}' | head -n1)|g" /etc/stunnel/stunnel.conf
 sed -i "s|Stunnel_Port2|$Stunnel_Port2|g" /etc/stunnel/stunnel.conf
 sed -i "s|openssh_port_c|$(netstat -tlnp | grep -i ssh | awk '{print $4}' | cut -d: -f2 | xargs | awk '{print $2}' | head -n1)|g" /etc/stunnel/stunnel.conf

 # Restarting stunnel service
 systemctl restart $StunnelDir

}

function InsOpenVPN(){
 # Checking if openvpn folder is accidentally deleted or purged
 if [[ ! -e /etc/openvpn ]]; then
  mkdir -p /etc/openvpn
 fi

 # Removing all existing openvpn server files
 rm -rf /etc/openvpn/*

 # Creating server.conf, ca.crt, server.crt and server.key
 cat <<'myOpenVPNconf' > /etc/openvpn/server_tcp.conf
# OpenVPN TCP
port OVPNTCP
proto tcp
dev tun
dev-type tun
sndbuf 0
rcvbuf 0
ca /etc/openvpn/ca.crt
cert /etc/openvpn/server.crt
key /etc/openvpn/server.key
dh /etc/openvpn/dh2048.pem
tls-auth /etc/openvpn/ta.key 0
topology subnet
server 10.9.0.0 255.255.255.0
ifconfig-pool-persist ipp.txt
push "redirect-gateway def1 bypass-dhcp"
push "dhcp-option DNS 8.8.8.8"
push "dhcp-option DNS 8.8.4.4"
keepalive 10 120
cipher AES-256-CBC
auth SHA256
comp-lzo
user nobody
group nogroup
persist-tun
status openvpn-status.log
verb 2
mute 3
verify-client-cert none
username-as-common-name
plugin /etc/openvpn/plugins/openvpn-plugin-auth-pam.so login
myOpenVPNconf

cat <<'myOpenVPNconf2' > /etc/openvpn/server_udp.conf
# OpenVPN UDP
port OVPNUDP
proto udp
dev tun
ca /etc/openvpn/ca.crt
cert /etc/openvpn/server.crt
key /etc/openvpn/server.key
dh /etc/openvpn/dh2048.pem
verify-client-cert none
username-as-common-name
key-direction 0
plugin /etc/openvpn/plugins/openvpn-plugin-auth-pam.so login
server 10.201.0.0 255.255.0.0
ifconfig-pool-persist ipp.txt
push "route-method exe"
push "route-delay 2"
keepalive 10 120
comp-lzo
user nobody
group nogroup
persist-key
persist-tun
status openvpn-status.log
log udp.log
verb 2
ncp-disable
cipher none
auth none
myOpenVPNconf2

 cat <<'EOF7'> /etc/openvpn/ca.crt
-----BEGIN CERTIFICATE-----
MIIEADCCAuigAwIBAgIEdYPFyTANBgkqhkiG9w0BAQsFADCBmDELMAkGA1UEBhMC
SUQxETAPBgNVBAMMCFdJTERZVlBOMQ0wCwYDVQQIDARSaWF1MRYwFAYDVQQHDA1C
YWdhbnNpYXBpYXBpMRcwFQYDVQQKDA53aWxkeXZwbi5teS5pZDERMA8GA1UECwwI
V0lMRFlWUE4xIzAhBgkqhkiG9w0BCQEWFGFkbWluQHdpbGR5dnBuLm15LmlkMB4X
DTIwMTIwNDA1MTAzOFoXDTMwMTIwMjA1MTAzOFowgZgxCzAJBgNVBAYTAklEMREw
DwYDVQQDDAhXSUxEWVZQTjENMAsGA1UECAwEUmlhdTEWMBQGA1UEBwwNQmFnYW5z
aWFwaWFwaTEXMBUGA1UECgwOd2lsZHl2cG4ubXkuaWQxETAPBgNVBAsMCFdJTERZ
VlBOMSMwIQYJKoZIhvcNAQkBFhRhZG1pbkB3aWxkeXZwbi5teS5pZDCCASIwDQYJ
KoZIhvcNAQEBBQADggEPADCCAQoCggEBAJdPAiHRWrTOH+P5nbbN8NTBAXrUo+u8
01m1K7Kn/0Vw6tZFZFZsWvArOZrnGBe7PpZRJ5f4Hl9TNUFYRatiamy84n3TISpF
GdsM8WYZ3YYFfuF/ds+YLcMlIRJSEkU2dmkLTisToJM7qK+g/zmp9xbYZBTyz5q2
1PAZIxaBlU7lPau4bGmp4oYTxduxBiA5hjic+beZsCLE8uvHgtaDfwtnPEdCqWJl
azr22MD0lh30JOxI1N0DoX2quUcvEflAAPyGRJFzYLvo60AlYwCi3FjIG949zKoI
Zvj9lu2AGuFdox7/SvtyfJX5ilRbotdpbKE5BJKM6e4rWTCTKgAMtwUCAwEAAaNQ
ME4wHQYDVR0OBBYEFO3HAZlzcFQltZHat+yBesqyojtPMB8GA1UdIwQYMBaAFO3H
AZlzcFQltZHat+yBesqyojtPMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQAD
ggEBAAR3FvYEn1JocOCBTHGAOF//KmonGVDOf2USSj6Sp2Hy7Tbe3KdNHa5Bz5kR
NO0ag3dZ00Wsggl3WCqkqE/mc17y8mJFSbapfArTsfH4TTsfqFUUUDVHMfHCObGv
hpTsvVLH5R+ka95kGtw0s3j2yHM0ArVqtccSxG6DBS6u+tCJIq5VZ63VM3D+UOg5
ASkga04wPUZeSfljIPqHq4G6zasrI5Odw27BGj2jaSwjf60cqe3EFk5v2Qmpp514
1Mzj4GUOJ+fAj6usic1X18KewMHqxS9AQSQk0QEcH0R43fTHL0zIqixy7L7wpZuM
Yr7e/jQMx9UglQ3OgjTcxNjT9YA=
-----END CERTIFICATE-----
EOF7
 cat <<'EOF9'> /etc/openvpn/server.crt
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 1 (0x1)
        Signature Algorithm: sha256WithRSAEncryption
        Issuer: C=ID, ST=ID, L=Indonesia, O=wildyvpn.my.id, OU=wildyvpn.my.id, CN=wildyvpn.my.id CA/name=server/emailAddress=admin@wildyvpn.my.id
        Validity
            Not Before: Jul 18 13:14:04 2020 GMT
            Not After : Jul 16 13:14:04 2030 GMT
        Subject: C=ID, ST=ID, L=Indonesia, O=wildyvpn.my.id, OU=wildyvpn.my.id, CN=wildyvpn.my.id/name=server/emailAddress=admin@wildyvpn.my.id
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                RSA Public-Key: (2048 bit)
                Modulus:
                    00:c5:ac:1b:f2:33:62:98:8e:6f:f3:0c:bf:a7:3f:
                    ce:c8:41:f9:a4:87:38:94:85:71:8a:75:bf:2d:b5:
                    84:d5:66:ec:5f:b1:e5:40:42:93:e9:82:c9:c9:a0:
                    0a:3e:60:d8:07:c6:1d:b4:8f:ac:2f:82:d3:17:17:
                    3b:32:38:7b:c3:6c:85:0c:ec:93:55:09:95:05:c8:
                    a5:a6:94:9d:48:dd:b2:0d:2e:d2:1b:01:48:d2:c4:
                    40:21:7c:3a:fe:fc:c6:e3:aa:e0:28:68:51:29:02:
                    8a:af:8b:a6:f2:97:aa:ab:9b:46:39:e3:02:0f:cb:
                    54:78:e6:41:94:d8:7e:55:76:e2:55:a2:cc:48:5c:
                    00:e9:a0:66:2e:34:6f:77:7a:f6:e9:8a:77:e4:73:
                    c2:06:c4:4b:e5:c1:5d:c9:f5:52:1d:e3:51:8a:cf:
                    0b:e5:cd:e6:d3:26:8d:fb:29:42:72:48:e6:14:90:
                    fc:bd:b0:77:98:d1:cc:dd:8d:2c:80:94:40:9b:2d:
                    1b:08:d1:f9:04:ce:e7:3b:f6:ff:3c:86:34:65:d5:
                    da:ed:d9:47:3c:83:9f:a8:fc:fb:03:52:52:7e:d4:
                    fa:ec:dd:d5:04:44:9a:d8:c6:4b:ce:8d:4e:e2:9f:
                    15:12:02:9b:2c:58:e1:7b:25:f4:33:5d:ed:55:b2:
                    e9:9b
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Basic Constraints: 
                CA:FALSE
            Netscape Cert Type: 
                SSL Server
            Netscape Comment: 
                Easy-RSA Generated Server Certificate
            X509v3 Subject Key Identifier: 
                47:63:C2:33:1C:00:11:71:4A:93:99:BD:17:B9:ED:05:80:E7:F0:7E
            X509v3 Authority Key Identifier: 
                keyid:02:03:2C:D9:9E:90:A8:F9:10:C6:9D:21:3E:81:3F:55:73:2C:02:BF
                DirName:/C=ID/ST=ID/L=Indonesia/O=wildyvpn.my.id/OU=wildyvpn/CN=wildyvpn.my.id CA/name=server/emailAddress=admin@wildyvpn.my.id
                serial:05:BD:DD:BB:FB:C6:45:A5:4E:62:BA:9F:F0:62:CD:50:E1:C0:97:99

            X509v3 Extended Key Usage: 
                TLS Web Server Authentication
            X509v3 Key Usage: 
                Digital Signature, Key Encipherment
            X509v3 Subject Alternative Name: 
                DNS:vpnstores
    Signature Algorithm: sha256WithRSAEncryption
         56:5b:8a:37:59:d1:e7:e5:ab:ac:d1:1b:2b:a2:6c:9d:75:22:
         1f:f2:4a:39:c6:dd:9e:ea:16:a9:59:db:c8:69:b3:27:27:6b:
         63:87:f1:10:8a:c5:50:d6:f5:30:5d:85:2d:d6:1a:3c:59:7a:
         f3:7c:4c:d2:c7:3d:b1:4b:c6:f5:71:a8:96:7d:1d:a2:2f:61:
         06:7a:23:2a:a5:48:f4:98:b7:ac:2b:e3:16:e1:e4:d4:6b:b1:
         e4:71:d4:40:56:2b:c9:d1:c5:37:e5:2b:f9:13:e4:f0:66:3a:
         94:45:46:39:23:01:2a:b0:ba:ce:2d:b4:96:cb:d7:4d:84:57:
         38:47:b0:de:ef:e5:1b:7a:d3:10:ab:9f:7b:38:ff:22:23:8c:
         26:0b:78:14:33:24:c2:49:b6:f5:08:73:35:1c:bb:ab:c1:fa:
         a6:95:31:52:a5:9b:34:e4:c1:2e:f0:4a:85:41:a4:07:11:3e:
         7e:14:22:3c:4a:be:4b:15:a8:81:79:62:9d:2c:e3:6f:e3:e2:
         c8:42:34:be:63:3f:ff:b3:a3:6a:46:44:8e:0a:97:7c:b8:90:
         22:98:cb:7b:8f:af:d1:cb:75:cf:cb:56:9e:df:4a:a5:73:cf:
         ba:4c:f0:9f:d5:f5:55:ab:4b:bb:20:22:c1:c3:a4:c5:7b:8e:
         c6:f7:c0:3b
-----BEGIN CERTIFICATE-----
MIIEADCCAuigAwIBAgIEdYPFyTANBgkqhkiG9w0BAQsFADCBmDELMAkGA1UEBhMC
SUQxETAPBgNVBAMMCFdJTERZVlBOMQ0wCwYDVQQIDARSaWF1MRYwFAYDVQQHDA1C
YWdhbnNpYXBpYXBpMRcwFQYDVQQKDA53aWxkeXZwbi5teS5pZDERMA8GA1UECwwI
V0lMRFlWUE4xIzAhBgkqhkiG9w0BCQEWFGFkbWluQHdpbGR5dnBuLm15LmlkMB4X
DTIwMTIwNDA1MTAzOFoXDTMwMTIwMjA1MTAzOFowgZgxCzAJBgNVBAYTAklEMREw
DwYDVQQDDAhXSUxEWVZQTjENMAsGA1UECAwEUmlhdTEWMBQGA1UEBwwNQmFnYW5z
aWFwaWFwaTEXMBUGA1UECgwOd2lsZHl2cG4ubXkuaWQxETAPBgNVBAsMCFdJTERZ
VlBOMSMwIQYJKoZIhvcNAQkBFhRhZG1pbkB3aWxkeXZwbi5teS5pZDCCASIwDQYJ
KoZIhvcNAQEBBQADggEPADCCAQoCggEBAJdPAiHRWrTOH+P5nbbN8NTBAXrUo+u8
01m1K7Kn/0Vw6tZFZFZsWvArOZrnGBe7PpZRJ5f4Hl9TNUFYRatiamy84n3TISpF
GdsM8WYZ3YYFfuF/ds+YLcMlIRJSEkU2dmkLTisToJM7qK+g/zmp9xbYZBTyz5q2
1PAZIxaBlU7lPau4bGmp4oYTxduxBiA5hjic+beZsCLE8uvHgtaDfwtnPEdCqWJl
azr22MD0lh30JOxI1N0DoX2quUcvEflAAPyGRJFzYLvo60AlYwCi3FjIG949zKoI
Zvj9lu2AGuFdox7/SvtyfJX5ilRbotdpbKE5BJKM6e4rWTCTKgAMtwUCAwEAAaNQ
ME4wHQYDVR0OBBYEFO3HAZlzcFQltZHat+yBesqyojtPMB8GA1UdIwQYMBaAFO3H
AZlzcFQltZHat+yBesqyojtPMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQAD
ggEBAAR3FvYEn1JocOCBTHGAOF//KmonGVDOf2USSj6Sp2Hy7Tbe3KdNHa5Bz5kR
NO0ag3dZ00Wsggl3WCqkqE/mc17y8mJFSbapfArTsfH4TTsfqFUUUDVHMfHCObGv
hpTsvVLH5R+ka95kGtw0s3j2yHM0ArVqtccSxG6DBS6u+tCJIq5VZ63VM3D+UOg5
ASkga04wPUZeSfljIPqHq4G6zasrI5Odw27BGj2jaSwjf60cqe3EFk5v2Qmpp514
1Mzj4GUOJ+fAj6usic1X18KewMHqxS9AQSQk0QEcH0R43fTHL0zIqixy7L7wpZuM
Yr7e/jQMx9UglQ3OgjTcxNjT9YA=
-----END CERTIFICATE-----
EOF9
 cat <<'EOF10'> /etc/openvpn/server.key
-----BEGIN PRIVATE KEY-----
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCXTwIh0Vq0zh/j
+Z22zfDUwQF61KPrvNNZtSuyp/9FcOrWRWRWbFrwKzma5xgXuz6WUSeX+B5fUzVB
WEWrYmpsvOJ90yEqRRnbDPFmGd2GBX7hf3bPmC3DJSESUhJFNnZpC04rE6CTO6iv
oP85qfcW2GQU8s+attTwGSMWgZVO5T2ruGxpqeKGE8XbsQYgOYY4nPm3mbAixPLr
x4LWg38LZzxHQqliZWs69tjA9JYd9CTsSNTdA6F9qrlHLxH5QAD8hkSRc2C76OtA
JWMAotxYyBvePcyqCGb4/ZbtgBrhXaMe/0r7cnyV+YpUW6LXaWyhOQSSjOnuK1kw
kyoADLcFAgMBAAECggEANfgoeoeCIxuipF5Usu+iB0EQlg9iqKMhf83vWDo0A0DT
grodn/XmOeQxF9916IERQeyQgtQtgTLcvAIQV6Ey9LYq01aLbdhX8JodQJ3ZNgSf
zS754fIV4JVNxosfmTBj6/PsXdESZXHSKVLztk25pJxqlk5FXpn4Oeu9aDmwWANA
I/VChRCvY2n04dIz7CPs6wD+Ebk37ixF69pKem2iaR67p1SL0Y02GnnWLClR+LWw
waRNS0a7oPGR+KVTraXfxk0alSK5dWoyv4cd8uf7u0QJt2UDM5ciFuXpfvyzWkn3
KH/9LCiG86zO4r79WBMCWpIhcuMysxs7YjSoAYrzwQKBgQDGfPtwO5PND7ngBwFa
EyTDt2zeBLWCwh+h6Qk3DB+bD583JA2dAk8UXsbo/AdNY2d90AHR6G45tza4z8Zp
19/5ZZqMa+lcWQhZizgu3jnNG0g0KobNcc+hqcfgnKRG2wggF8G1jBi01d/Hk2vJ
30idleUd1yiBK6x9duCUBfpcCwKBgQDDJnGRiB2R00q83/+Ct3yRR2MsfYs71wzT
/PVr+taFShfeha4XsrGAp3Ip4J4an3szu9mCWMRKFBt7iTOax+g0qeEFZSyjkwX6
NUGwQeKtx+2KLuj+mYhCcJb00Q29sef7YQ0pA7OipRM/3gwOr2gvcW7t3HVYOESG
mGenbmMTLwKBgD5MmDbf3EIuv26bhEcbXxy3A8qju7zw5TDSjfvjKEBpJNYP0N4J
DX0dSl1yTXBy1NbeZNPXmlEvOlPDk0lBYqFKzLlqXXKI12ATnGzJf2brOzx0ZJ8z
K7JYMc5EHCPJN8Gq8zfiYxbPUk+368sO9CHSHHnDQIlahedTWqXbQnuFAoGBAKjx
fyAeVnsIEIuy3+CqOI0M4C6EASWs5s4fD9iLL2v02PUrhau+ZyyZyZu3eShTKLWA
yqytbEE1ZxVrkeFNbxkoeEXTcPGrNmGF+Xg9kaAglOQr+ElxYSUjk4wd72dpvQtC
2cHIEpubjS6dbJLKB8gKy53gXTYigDCFgDbSubLBAoGAb0MB5hvIMmxzn2ryclOA
RHpzmqAwnPsoRB9HYfXig8Hhqi1TDHZvnwPC6pc0IAtKq4rbyCnOtd779pVvE56Z
R+oZwWpwWGj2XV6eqkIXv+PTCqUoWLWiUMEXKB2MadOgc4zFgrwvql3k5JQhVL5h
T5usGFu/aoVx5HxgD4EN4Mc=
-----END PRIVATE KEY-----
EOF10
 cat <<'EOF18'> /etc/openvpn/ta.key
#
# 2048 bit OpenVPN static key
#
-----BEGIN OpenVPN Static key V1-----
c98283275639c936be4d2edf261afdbd
c37101544f9c4d829422aee7a680276d
965ff49ccadbdba55e561eef96568024
6c0b85edc405a131a9981490d71a1c7e
085b4610cb39bec0781dc4ac483fd832
06f35157a6017a7c3609cebbbe5792c9
683001eed3618731c22909234876b188
5c5507e5313930ce18b636f12cb24471
559ff5bbd995c3811fdb02c093e777ed
6e41e6351eb694c94d703ecb59b14ed4
96aeba338e227efde855ab57649f8fc8
bdd7bb0f7cd5ef8426a9f4aec3bda3ba
1aa5eaad291a4311b7ccf384b80bb8c5
e57d0be77beb49cb3a0139cd2b6e3665
f6c3e5524897bc3ee15505903b66e8f8
e52ddb29b616a4854e9a3252754bcbee
-----END OpenVPN Static key V1-----
EOF18
 cat <<'EOF13'> /etc/openvpn/dh2048.pem
-----BEGIN DH PARAMETERS-----
MIIBCAKCAQEAxoNLELO1dQDFW0ZRRbPG9Cv1ifPSqGQB0tIusmTrn22nMqND06fK
NfJNQhnEahwYlbA2DEXxjZ7gpXWA6mrKUIVTFfnFohmHhLgkb9QUc0m5LwVgcd/w
25s+3JEcV3MJ70Cf64wG+KVHMJeISagDlKlE+2f7MJkkSV1vgvfQOpnVp+DF38tL
L57p4njl0n61NNUnbvH0YEPbvKPk0CJ3EGGQE/uhwKIU+pJt/o9S0wppq9sUrOuD
1eelmMZPuWH3aSVIUqiucEsczGn5GfqIc2KNHAMfJ5JhLOjjJvb1cewD2DpIiI2I
bVexIf9WpjXw+LZrjSifNgQ1Eqfdd3tDiwIBAg==
-----END DH PARAMETERS-----
EOF13

 # Getting all dns inside resolv.conf then use as Default DNS for our openvpn server
 grep -v '#' /etc/resolv.conf | grep 'nameserver' | grep -E -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | while read -r line; do
	echo "push \"dhcp-option DNS $line\"" >> /etc/openvpn/server_tcp.conf
done

 # Creating a New update message in server.conf
 cat <<'NUovpn' > /etc/openvpn/server.conf
 # New Update are now released, OpenVPN Server
 # are now running both TCP and UDP Protocol. (Both are only running on IPv4)
 # But our native server.conf are now removed and divided
 # Into two different configs base on their Protocols:
 #  * OpenVPN TCP (located at /etc/openvpn/server_tcp.conf
 #  * OpenVPN UDP (located at /etc/openvpn/server_udp.conf
 # 
 # Also other logging files like
 # status logs and server logs
 # are moved into new different file names:
 #  * OpenVPN TCP Server logs (/etc/openvpn/tcp.log)
 #  * OpenVPN UDP Server logs (/etc/openvpn/udp.log)
 #  * OpenVPN TCP Status logs (/etc/openvpn/tcp_stats.log)
 #  * OpenVPN UDP Status logs (/etc/openvpn/udp_stats.log)
 #
 # Server ports are configured base on env vars
 # executed/raised from this script (OpenVPN_TCP_Port/OpenVPN_UDP_Port)
 #
 # Enjoy the new update
 # Script Updated by JohnFordTV
NUovpn

 # setting openvpn server port
 sed -i "s|OVPNTCP|$OpenVPN_TCP_Port|g" /etc/openvpn/server_tcp.conf
 sed -i "s|OVPNUDP|$OpenVPN_UDP_Port|g" /etc/openvpn/server_udp.conf
 
 # Getting some OpenVPN plugins for unix authentication
 cd
 wget https://github.com/johndesu090/AutoScriptDB/raw/master/Files/Plugins/plugin.tgz
 tar -xzvf /root/plugin.tgz -C /etc/openvpn/
 rm -f plugin.tgz
 
 # Some workaround for OpenVZ machines for "Startup error" openvpn service
 if [[ "$(hostnamectl | grep -i Virtualization | awk '{print $2}' | head -n1)" == 'openvz' ]]; then
 sed -i 's|LimitNPROC|#LimitNPROC|g' /lib/systemd/system/openvpn*
 systemctl daemon-reload
fi

 # Allow IPv4 Forwarding
 sed -i '/net.ipv4.ip_forward.*/d' /etc/sysctl.conf
 sed -i '/net.ipv4.ip_forward.*/d' /etc/sysctl.d/*.conf
 echo 'net.ipv4.ip_forward=1' > /etc/sysctl.d/20-openvpn.conf
 sysctl --system &> /dev/null

 # Iptables Rule for OpenVPN server
 cat <<'EOFipt' > /etc/openvpn/openvpn.bash
#!/bin/bash
PUBLIC_INET="$(ip -4 route ls | grep default | grep -Po '(?<=dev )(\S+)' | head -1)"
IPCIDR='10.200.0.0/16'
IPCIDR2='10.201.0.0/16'
iptables -I FORWARD -s $IPCIDR -j ACCEPT
iptables -I FORWARD -s $IPCIDR2 -j ACCEPT
iptables -t nat -A POSTROUTING -o $PUBLIC_INET -j MASQUERADE
iptables -t nat -A POSTROUTING -s $IPCIDR -o $PUBLIC_INET -j MASQUERADE
iptables -t nat -A POSTROUTING -s $IPCIDR2 -o $PUBLIC_INET -j MASQUERADE
EOFipt
 chmod +x /etc/openvpn/openvpn.bash
 bash /etc/openvpn/openvpn.bash

 # Enabling IPv4 Forwarding
 echo 1 > /proc/sys/net/ipv4/ip_forward
 
 # Starting OpenVPN server
 systemctl start openvpn@server_tcp
 systemctl enable openvpn@server_tcp
 systemctl start openvpn@server_udp
 systemctl enable openvpn@server_udp

}
function InsProxy(){

 # Removing Duplicate privoxy config
 rm -rf /etc/privoxy/config*
 
 # Creating Privoxy server config using cat eof tricks
 cat <<'privoxy' > /etc/privoxy/config
# My Privoxy Server Config
user-manual /usr/share/doc/privoxy/user-manual
confdir /etc/privoxy
logdir /var/log/privoxy
filterfile default.filter
logfile logfile
listen-address 0.0.0.0:Privoxy_Port1
listen-address 0.0.0.0:Privoxy_Port2
toggle 1
enable-remote-toggle 0
enable-remote-http-toggle 0
enable-edit-actions 0
enforce-blocks 0
buffer-limit 4096
enable-proxy-authentication-forwarding 1
forwarded-connect-retries 1
accept-intercepted-requests 1
allow-cgi-request-crunching 1
split-large-forms 0
keep-alive-timeout 5
tolerate-pipelining 1
socket-timeout 300
permit-access 0.0.0.0/0 IP-ADDRESS
privoxy

 # Setting machine's IP Address inside of our privoxy config(security that only allows this machine to use this proxy server)
 sed -i "s|IP-ADDRESS|$IPADDR|g" /etc/privoxy/config
 
 # Setting privoxy ports
 sed -i "s|Privoxy_Port1|$Privoxy_Port1|g" /etc/privoxy/config
 sed -i "s|Privoxy_Port2|$Privoxy_Port2|g" /etc/privoxy/config

 # Removing Duplicate Squid config
 rm -rf /etc/squid/squid.con*
 
 # Creating Squid server config using cat eof tricks
 cat <<'mySquid' > /etc/squid/squid.conf
# My Squid Proxy Server Config
acl VPN dst IP-ADDRESS/32
http_access allow VPN
http_access deny all 
http_port 0.0.0.0:Squid_Port1
http_port 0.0.0.0:Squid_Port2
http_port 0.0.0.0:Squid_Port3
### Allow Headers
acl all src 0.0.0.0/0
http_access allow all
forwarded_for off
via off
request_header_access Host allow all
request_header_access Content-Length allow all
request_header_access Content-Type allow all
request_header_access All deny all
coredump_dir /var/spool/squid
dns_nameservers 1.1.1.1 1.0.0.1
refresh_pattern ^ftp: 1440 20% 10080
refresh_pattern ^gopher: 1440 0% 1440
refresh_pattern -i (/cgi-bin/|\?) 0 0% 0
refresh_pattern . 0 20% 4320
visible_hostname localhost
mySquid

 # Setting machine's IP Address inside of our Squid config(security that only allows this machine to use this proxy server)
 sed -i "s|IP-ADDRESS|$IPADDR|g" /etc/squid/squid.conf
 
 # Setting squid ports
 sed -i "s|Squid_Port1|$Squid_Port1|g" /etc/squid/squid.conf
 sed -i "s|Squid_Port2|$Squid_Port2|g" /etc/squid/squid.conf
 sed -i "s|Squid_Port3|$Squid_Port3|g" /etc/squid/squid.conf

 # Starting Proxy server
 echo -e "Restarting proxy server..."
 systemctl restart squid
}

function OvpnConfigs(){
 # Creating nginx config for our ovpn config downloads webserver
 cat <<'myNginxC' > /etc/nginx/conf.d/johnfordtv-ovpn-config.conf
# My OpenVPN Config Download Directory
server {
 listen 0.0.0.0:myNginx;
 server_name localhost;
 root /var/www/openvpn;
 index index.html;
}
myNginxC

 # Setting our nginx config port for .ovpn download site
 sed -i "s|myNginx|$OvpnDownload_Port|g" /etc/nginx/conf.d/johnfordtv-ovpn-config.conf

 # Removing Default nginx page(port 80)
 rm -rf /etc/nginx/sites-*

 # Creating our root directory for all of our .ovpn configs
 rm -rf /var/www/openvpn
 mkdir -p /var/www/openvpn

 # Now creating all of our OpenVPN Configs 

cat <<EOF15> /var/www/openvpn/tcp.ovpn
# Mac Quan Inc
# Thanks for using this script, Enjoy Highspeed OpenVPN Service
client
dev tun
proto tcp
setenv FRIENDLY_NAME "Mac Quan Inc - VPN Proxy"
remote $IPADDR $OpenVPN_TCP_Port
http-proxy $IPADDR $Squid_Port2
http-proxy-retry
resolv-retry infinite
route-method exe
nobind
persist-key
persist-tun
comp-lzo
cipher AES-256-CBC
auth SHA256
push "redirect-gateway def1 bypass-dhcp"
verb 3
push-peer-info
ping 10
ping-restart 60
hand-window 70
server-poll-timeout 4
reneg-sec 2592000
sndbuf 0
rcvbuf 0
remote-cert-tls server
key-direction 1
<auth-user-pass>
sam
sam
</auth-user-pass>
<ca>
$(cat /etc/openvpn/ca.crt)
</ca>
<cert>
$(cat /etc/openvpn/server.crt)
</cert>
<key>
$(cat /etc/openvpn/server.key)
</key>
<tls-auth>
$(cat /etc/openvpn/ta.key)
</tls-auth>
EOF15

cat <<EOF16> /var/www/openvpn/sun-tutcp.ovpn
# Mac Quan Inc
# Thanks for using this script, Enjoy Highspeed OpenVPN Service
client
dev tun
proto tcp
setenv FRIENDLY_NAME "Mac Quan Inc - VPN Proxy 2"
remote $IPADDR $OpenVPN_TCP_Port
remote-cert-tls server
connect-retry infinite
resolv-retry infinite
nobind
persist-key
persist-tun
auth none
auth-nocache
cipher none
comp-lzo
redirect-gateway def1
setenv CLIENT_CERT 0
reneg-sec 0
verb 1
http-proxy $IPADDR $Squid_Port2
http-proxy-retry
<auth-user-pass>
sam
sam
</auth-user-pass>
<ca>
$(cat /etc/openvpn/ca.crt)
</ca>
<cert>
$(cat /etc/openvpn/server.crt)
</cert>
<key>
$(cat /etc/openvpn/server.key)
</key>
<tls-auth>
$(cat /etc/openvpn/ta.key)
</tls-auth>
EOF16

cat <<EOF162> /var/www/openvpn/udp.ovpn
# Mac Quan Inc
# Thanks for using this script, Enjoy Highspeed OpenVPN Service
client
dev tun
proto udp
setenv FRIENDLY_NAME "Mac Quan Inc - VPN UDP"
remote $IPADDR $OpenVPN_UDP_Port
remote-cert-tls server
resolv-retry infinite
float
fast-io
nobind
persist-key
persist-remote-ip
persist-tun
auth-user-pass
auth none
auth-nocache
cipher none
comp-lzo
redirect-gateway def1
setenv CLIENT_CERT 0
reneg-sec 0
verb 1
<auth-user-pass>
sam
sam
</auth-user-pass>
<ca>
$(cat /etc/openvpn/ca.crt)
</ca>
<cert>
$(cat /etc/openvpn/server.crt)
</cert>
<key>
$(cat /etc/openvpn/server.key)
</key>
EOF162

cat <<EOF17> /var/www/openvpn/ssl.ovpn
# Mac Quan Inc
# Thanks for using this script, Enjoy Highspeed OpenVPN Service
client
dev tun
proto tcp-client
setenv FRIENDLY_NAME "Mac Quan Inc - VPN TCP"
dev tun
remote 127.0.0.1 $OpenVPN_TCP_Port
route $IPADDR 255.255.255.255 net_gateway
remote-cert-tls server
bind
float
mute-replay-warnings
connect-retry-max 9999
redirect-gateway def1
connect-retry 0 1
resolv-retry infinite
setenv CLIENT_CERT 0
persist-tun
persist-key
auth-user-pass
auth none
auth-nocache
auth-retry interact
cipher none
comp-lzo
reneg-sec 0
verb 0
nice -20
<auth-user-pass>
sam
sam
</auth-user-pass>
<ca>
$(cat /etc/openvpn/ca.crt)
</ca>
<cert>
$(cat /etc/openvpn/server.crt)
</cert>
<key>
$(cat /etc/openvpn/server.key)
</key>
EOF17

cat <<EOF152> /var/www/openvpn/gtmwnp.ovpn
# Mac Quan Inc
# Thanks for using this script, Enjoy Highspeed OpenVPN Service
client
dev tun
proto tcp-client
setenv FRIENDLY_NAME "Mac Quan Inc - VPN Proxy"
remote $IPADDR $OpenVPN_TCP_Port
nobind
persist-key
persist-tun
comp-lzo
keepalive 10 120
tls-client
remote-cert-tls server
verb 2
auth-user-pass
cipher none
auth none
auth-nocache
auth-retry interact
connect-retry 0 1
nice -20
reneg-sec 0
redirect-gateway def1
setenv CLIENT_CERT 0
dhcp-option DNS 1.1.1.1
dhcp-option DNS 1.0.0.1
http-proxy $IPADDR $Squid_Port2
http-proxy-retry
<auth-user-pass>
sam
sam
</auth-user-pass>
<ca>
$(cat /etc/openvpn/ca.crt)
</ca>
<cert>
$(cat /etc/openvpn/server.crt)
</cert>
<key>
$(cat /etc/openvpn/server.key)
</key>
EOF152

cat <<EOF1152> /var/www/openvpn/gtmsns.ovpn
# Mac Quan Inc
# Thanks for using this script, Enjoy Highspeed OpenVPN Service
client
dev tun
proto tcp-client
setenv FRIENDLY_NAME "Mac Quan Inc - VPN Proxy"
remote $IPADDR $OpenVPN_TCP_Port
nobind
persist-key
persist-tun
comp-lzo
keepalive 10 120
tls-client
remote-cert-tls server
verb 3
auth-user-pass
cipher none
auth none
auth-nocache
auth-retry interact
connect-retry 0 1
nice -20
reneg-sec 0
redirect-gateway def1
setenv CLIENT_CERT 0
dhcp-option DNS 1.1.1.1
dhcp-option DNS 1.0.0.1
http-proxy $IPADDR $Squid_Port2
http-proxy-retry
<auth-user-pass>
sam
sam
</auth-user-pass>
<ca>
$(cat /etc/openvpn/ca.crt)
</ca>
<cert>
$(cat /etc/openvpn/server.crt)
</cert>
<key>
$(cat /etc/openvpn/server.key)
</key>
EOF1152

cat <<EOF1632> /var/www/openvpn/suntu-dns.ovpn
# Mac Quan Inc -
# Thanks for using this script, Enjoy Highspeed OpenVPN Service
client
dev tun
proto tcp-client
setenv FRIENDLY_NAME "Mac Quan Inc - VPN"
remote $IPADDR $OpenVPN_TCP_Port
nobind
persist-key
persist-tun
comp-lzo
keepalive 10 120
tls-client
remote-cert-tls server
verb 2
auth-user-pass
cipher none
auth none
auth-nocache
auth-retry interact
connect-retry 0 1
nice -20
reneg-sec 0
redirect-gateway def1
setenv CLIENT_CERT 0
dhcp-option DNS 1.1.1.1
dhcp-option DNS 1.0.0.1
http-proxy $IPADDR 3356
http-proxy-retry
<auth-user-pass>
sam
sam
</auth-user-pass>
<ca>
$(cat /etc/openvpn/ca.crt)
</ca>
<cert>
$(cat /etc/openvpn/server.crt)
</cert>
<key>
$(cat /etc/openvpn/server.key)
</key>
EOF1632

# Setting UFW
apt-get install ufw
ufw allow ssh
ufw allow 1103/tcp
sed -i 's|DEFAULT_INPUT_POLICY="DROP"|DEFAULT_INPUT_POLICY="ACCEPT"|' /etc/default/ufw
sed -i 's|DEFAULT_FORWARD_POLICY="DROP"|DEFAULT_FORWARD_POLICY="ACCEPT"|' /etc/default/ufw
cat > /etc/ufw/before.rules <<-END
# START OPENVPN RULES
# NAT table rules
*nat
:POSTROUTING ACCEPT [0:0]
# Allow traffic from OpenVPN client to eth0
-A POSTROUTING -s 10.8.0.0/8 -o eth0 -j MASQUERADE
COMMIT
# END OPENVPN RULES
END
ufw status
ufw disable

 # Creating OVPN download site index.html
cat <<'mySiteOvpn' > /var/www/openvpn/index.html
<!DOCTYPE html>
<html lang="en">

<!-- Simple OVPN Download site by Mac Quan Inc -->

<head><meta charset="utf-8" /><title>Mac Quan Inc - OVPN Config Download</title><meta name="description" content="MyScriptName Server" /><meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" name="viewport" /><meta name="theme-color" content="#000000" /><link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.2/css/all.css"><link href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet"><link href="https://cdnjs.cloudflare.com/ajax/libs/mdbootstrap/4.8.3/css/mdb.min.css" rel="stylesheet"></head><body><div class="container justify-content-center" style="margin-top:9em;margin-bottom:5em;"><div class="col-md"><div class="view"><img src="https://openvpn.net/wp-content/uploads/openvpn.jpg" class="card-img-top"><div class="mask rgba-white-slight"></div></div><div class="card"><div class="card-body"><h5 class="card-title">Config List</h5><br /><ul class="list-group"><li class="list-group-item justify-content-between align-items-center" style="margin-bottom:1em;"><p>For Sun <span class="badge light-blue darken-4">Android/iOS/PC/Modem</span><br /><small> UDP Server For TU/CTC/CTU Promos</small></p><a class="btn btn-outline-success waves-effect btn-sm" href="http://IP-ADDRESS:NGINXPORT/sun-tuudp.ovpn" style="float:right;"><i class="fa fa-download"></i> Download</a></li><li class="list-group-item justify-content-between align-items-center" style="margin-bottom:1em;"><p>For Sun <span class="badge light-blue darken-4">Android/iOS/PC/Modem</span><br /><small> TCP+Proxy Server For TU/CTC/CTU Promos</small></p><a class="btn btn-outline-success waves-effect btn-sm" href="http://IP-ADDRESS:NGINXPORT/sun-tuudp.ovpn" style="float:right;"><i class="fa fa-download"></i> Download</a></li><li class="list-group-item justify-content-between align-items-center" style="margin-bottom:1em;"><p>For Globe/TM <span class="badge light-blue darken-4">Android/iOS/PC/Modem</span><br /><small> For EasySURF/GoSURF/GoSAKTO Promos with WNP,SNS,FB and IG freebies</small></p><a class="btn btn-outline-success waves-effect btn-sm" href="http://IP-ADDRESS:NGINXPORT/gtmwnp.ovpn" style="float:right;"><i class="fa fa-download"></i> Download</a></li><li class="list-group-item justify-content-between align-items-center" style="margin-bottom:1em;"><p>For Sun <span class="badge light-blue darken-4">Modem</span><br /><small> Without Promo/Noload (Reconnecting Server, Use Low-latency VPS for fast reconnectivity)</small></p><a class="btn btn-outline-success waves-effect btn-sm" href="http://IP-ADDRESS:NGINXPORT/sun-noload.ovpn" style="float:right;"><i class="fa fa-download"></i> Download</a></li></ul></div></div></div></div></body></html>
mySiteOvpn
 
 # Setting template's correct name,IP address and nginx Port
 sed -i "s|NGINXPORT|$OvpnDownload_Port|g" /var/www/openvpn/index.html
 sed -i "s|IP-ADDRESS|$IPADDR|g" /var/www/openvpn/index.html

 # Restarting nginx service
 systemctl restart nginx
 
 # Creating all .ovpn config archives
 cd /var/www/openvpn
 zip -qq -r configs.zip *.ovpn
 cd
}

function ip_address(){
  local IP="$( ip addr | egrep -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | egrep -v "^192\.168|^172\.1[6-9]\.|^172\.2[0-9]\.|^172\.3[0-2]\.|^10\.|^127\.|^255\.|^0\." | head -n 1 )"
  [ -z "${IP}" ] && IP="$( wget -qO- -t1 -T2 ipv4.icanhazip.com )"
  [ -z "${IP}" ] && IP="$( wget -qO- -t1 -T2 ipinfo.io/ip )"
  [ ! -z "${IP}" ] && echo "${IP}" || echo
} 
IPADDR="$(ip_address)"

function ConfStartup(){
 # Daily reboot time of our machine
 # For cron commands, visit https://crontab.guru
 echo -e "0 4\t* * *\troot\treboot" > /etc/cron.d/b_reboot_job

 # Creating directory for startup script
 rm -rf /etc/johnfordtv
 mkdir -p /etc/johnfordtv
 chmod -R 755 /etc/johnfordtv
 
 # Creating startup script using cat eof tricks
 cat <<'EOFSH' > /etc/johnfordtv/startup.sh
#!/bin/bash
# Setting server local time
ln -fs /usr/share/zoneinfo/MyVPS_Time /etc/localtime

# Prevent DOS-like UI when installing using APT (Disabling APT interactive dialog)
export DEBIAN_FRONTEND=noninteractive

# Allowing ALL TCP ports for our machine (Simple workaround for policy-based VPS)
iptables -A INPUT -s $(wget -4qO- http://ipinfo.io/ip) -p tcp -m multiport --dport 1:65535 -j ACCEPT

# Allowing OpenVPN to Forward traffic
/bin/bash /etc/openvpn/openvpn.bash

# Deleting Expired SSH Accounts
/usr/local/sbin/delete_expired &> /dev/null
exit 0
EOFSH
 chmod +x /etc/johnfordtv/startup.sh
 
 # Setting server local time every time this machine reboots
 sed -i "s|MyVPS_Time|$MyVPS_Time|g" /etc/johnfordtv/startup.sh

 # 
 rm -rf /etc/sysctl.d/99*

 # Setting our startup script to run every machine boots 
 cat <<'FordServ' > /etc/systemd/system/johnfordtv.service
[Unit]
Description=JohnfordTV Startup Script
Before=network-online.target
Wants=network-online.target

[Service]
Type=oneshot
ExecStart=/bin/bash /etc/johnfordtv/startup.sh
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
FordServ
 chmod +x /etc/systemd/system/johnfordtv.service
 systemctl daemon-reload
 systemctl start johnfordtv
 systemctl enable johnfordtv &> /dev/null
 systemctl enable fail2ban &> /dev/null
 systemctl start fail2ban &> /dev/null

 # Rebooting cron service
 systemctl restart cron
 systemctl enable cron
 
}
 #Create Admin
 useradd -m admin
 echo "admin:itangsagli" | chpasswd

function ConfMenu(){
echo -e " Creating Menu scripts.."

cd /usr/local/sbin/
rm -rf {accounts,base-ports,base-ports-wc,base-script,bench-network,clearcache,connections,create,create_random,create_trial,delete_expired,diagnose,edit_dropbear,edit_openssh,edit_openvpn,edit_ports,edit_squid3,edit_stunnel4,locked_list,menu,options,ram,reboot_sys,reboot_sys_auto,restart_services,server,set_multilogin_autokill,set_multilogin_autokill_lib,show_ports,speedtest,user_delete,user_details,user_details_lib,user_extend,user_list,user_lock,user_unlock}
wget -q 'https://github.com/johndesu090/AutoScriptDB/raw/master/Files/Menu/bashmenu.zip'
unzip -qq bashmenu.zip
rm -f bashmenu.zip
chmod +x ./*
dos2unix ./* &> /dev/null
sed -i 's|/etc/squid/squid.conf|/etc/privoxy/config|g' ./*
sed -i 's|http_port|listen-address|g' ./*
cd ~
}

function ScriptMessage(){
 echo -e " [\e[1;32m$MyScriptName VPS Installer\e[0m]"
 echo -e ""
 echo -e " https://www.facebook.com/MacQuan.IT"
 echo -e ""
}

function InstBadVPN(){
 # Pull BadVPN Binary 64bit or 32bit
if [ "$(getconf LONG_BIT)" == "64" ]; then
 wget -O /usr/bin/badvpn-udpgw "https://github.com/johndesu090/AutoScriptDB/raw/master/Files/Plugins/badvpn-udpgw64"
else
 wget -O /usr/bin/badvpn-udpgw "https://github.com/johndesu090/AutoScriptDB/raw/master/Files/Plugins/badvpn-udpgw"
fi
 # Set BadVPN to Start on Boot via .profile
 sed -i '$ i\screen -AmdS badvpn badvpn-udpgw --listen-addr 127.0.0.1:7300' /root/.profile
 # Change Permission to make it Executable
 chmod +x /usr/bin/badvpn-udpgw
 # Start BadVPN via Screen
 screen -AmdS badvpn badvpn-udpgw --listen-addr 127.0.0.1:7300
}


#############################################
#############################################
########## Installation Process##############
#############################################
## WARNING: Do not modify or edit anything
## if you did'nt know what to do.
## This part is too sensitive.
#############################################
#############################################


 # (For OpenVPN) Checking it this machine have TUN Module, this is the tunneling interface of OpenVPN server
 if [[ ! -e /dev/net/tun ]]; then
 echo -e "[\e[1;31mError\e[0m] You cant use this script without TUN Module installed/embedded in your machine, file a support ticket to your machine admin about this matter"
 echo -e "[\e[1;31m-\e[0m] Script is now exiting..."
 exit 1
fi

 # Begin Installation by Updating and Upgrading machine and then Installing all our wanted packages/services to be install.
 ScriptMessage
 sleep 2
 InstUpdates
 
 # Configure OpenSSH and Dropbear
 echo -e "Configuring ssh..."
 InstSSH
 
 # Configure Stunnel
 echo -e "Configuring stunnel..."
 InsStunnel
 
 # Configure BadVPN UDPGW
 echo -e "Configuring BadVPN UDPGW..."
 InstBadVPN
 
 # Configure Webmin
 echo -e "Configuring webmin..."
 InstWebmin
 
 # Configure Squid
 echo -e "Configuring proxy..."
 InsProxy
 
 # Configure OpenVPN
 echo -e "Configuring OpenVPN..."
 InsOpenVPN
 
 # Configuring Nginx OVPN config download site
 OvpnConfigs

 # Some assistance and startup scripts
 ConfStartup

 ## DNS maker plugin for SUN users(for vps script usage only)
 wget -qO dnsmaker "https://raw.githubusercontent.com/Bonveio/BonvScripts/master/DNSMaster/debian"
 chmod +x dnsmaker
 ./dnsmaker
 rm -rf dnsmaker
 sed -i "s|http-proxy $IPADDR|http-proxy $(cat /tmp/abonv_mydns)|g" /var/www/openvpn/suntu-dns.ovpn
 sed -i "s|remote $IPADDR|remote $(cat /tmp/abonv_mydns)|g" /var/www/openvpn/sun-tuudp.ovpn
 curl -4sSL "$(cat /tmp/abonv_mydns_domain)" &> /dev/null
 mv /tmp/abonv_mydns /etc/bonveio/my_domain_name
 mv /tmp/abonv_mydns_id /etc/bonveio/my_domain_id
 rm -rf /tmp/abonv*

 # VPS Menu script v1.0
 ConfMenu
 
 # Setting server local time
 ln -fs /usr/share/zoneinfo/$MyVPS_Time /etc/localtime
 
 clear
 cd ~
 
  # Running screenfetch
 wget -O /usr/bin/screenfetch "https://raw.githubusercontent.com/johndesu090/AutoScriptDB/master/Files/Plugins/screenfetch"
 chmod +x /usr/bin/screenfetch
 echo "/bin/bash /etc/openvpn/openvpn.bash" >> .profile
 echo "clear" >> .profile
 echo "screenfetch" >> .profile

 
 # Showing script's banner message
 ScriptMessage
 
 # Showing additional information from installating this script
echo " "
echo "Installation has been completed!!"
echo "--------------------------------------------------------------------------------"
echo "                            Debian Premium Script                               "
echo "                                 --Mac Quan Inc--                                   "
echo "--------------------------------------------------------------------------------"
echo ""  | tee -a log-install.txt
echo "Server Information"  | tee -a log-install.txt
echo "   - Timezone    : Asia/Ha Noi (GMT +7)"  | tee -a log-install.txt
echo "   - Fail2Ban    : [ON]"  | tee -a log-install.txt
echo "   - IPtables    : [ON]"  | tee -a log-install.txt
echo "   - Auto-Reboot : [ON]"  | tee -a log-install.txt
echo "   - IPv6        : [OFF]"  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo "Application & Port Information"  | tee -a log-install.txt
echo "   - OpenVPN		: TCP $OpenVPN_TCP_Port UDP $OpenVPN_UDP_Port "  | tee -a log-install.txt
echo "   - OpenSSH		: $SSH_Port1, $SSH_Port2 "  | tee -a log-install.txt
echo "   - Dropbear		: $Dropbear_Port1, $Dropbear_Port2"  | tee -a log-install.txt
echo "   - Stunnel/SSL 	: $Stunnel_Port1, $Stunnel_Port2"  | tee -a log-install.txt
echo "   - Squid Proxy	: $Squid_Port1 , $Squid_Port2 (limit to IP Server)"  | tee -a log-install.txt
echo "   - Squid ELITE	: $Squid_Port3 (limit to IP Server)"  | tee -a log-install.txt
echo "   - Privoxy		: $Privoxy_Port1 , $Privoxy_Port2 (limit to IP Server)"  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo "Premium Script Information"  | tee -a log-install.txt
echo "   To display list of commands: menu"  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo "Important Information"  | tee -a log-install.txt
echo "   - Installation Log        : cat /root/log-install.txt"  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo "   - Webmin                  : http://$IPADDR:10000/"  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo "OpenVPN Configs Download"  | tee -a log-install.txt
echo "   - Download Link           : http://$IPADDR:85/configs.zip"  | tee -a log-install.txt
echo "Mac Quan Inc"  | tee -a log-install.txt
echo " Facebook: https://www.facebook.com/MacQuan.IT"  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo " From Mac Quan Inc with love"  | tee -a log-install.txt
echo " Please Reboot your VPS - Xin hay khoi dong lai VPS"

 # Clearing all logs from installation
 rm -rf /root/.bash_history && history -c && echo '' > /var/log/syslog

rm -f dke*
exit 1
